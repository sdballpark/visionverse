import { NextResponse } from 'next/server';
import axios from 'axios';
import { GEMINI_API_KEY, GEMINI_API_URL, GEMINI_MODEL } from '../config/gemini';

// Ensure environment variables are properly loaded
if (!process.env.VITE_GEMINI_API_KEY) {
  throw new Error('VITE_GEMINI_API_KEY is not set in environment variables');
}

export async function POST(request) {
  try {
    console.log('Starting image processing...');
    console.log('Gemini API Configuration:', {
      apiKey: GEMINI_API_KEY.substring(0, 5) + '...' + GEMINI_API_KEY.substring(GEMINI_API_KEY.length - 5),
      apiUrl: GEMINI_API_URL,
      model: GEMINI_MODEL
    });

    const formData = await request.formData();
    const file = formData.get('image');

    if (!file) {
      console.error('No image provided in request');
      return NextResponse.json(
        { error: 'No image provided' },
        { status: 400 }
      );
    }

    console.log('File info:', {
      name: file.name,
      type: file.type,
      size: file.size
    });

    // Validate file type and size
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
    const maxSize = 10 * 1024 * 1024; // 10MB

    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json(
        { error: 'Invalid file type. Only JPG, PNG, and GIF are supported.' },
        { status: 400 }
      );
    }

    if (file.size > maxSize) {
      return NextResponse.json(
        { error: 'File size exceeds 10MB limit.' },
        { status: 400 }
      );
    }

    // Process the image
    const imageBuffer = Buffer.from(await file.arrayBuffer());
    const base64Image = imageBuffer.toString('base64');

    console.log('Image processed successfully. Starting Gemini API call...');

    const startTime = Date.now();
    
    // Generate content using Gemini
    const response = await axios.post(
      `${GEMINI_API_URL}:generateContent`,
      {
        contents: [
          {
            inlineData: {
              mimeType: file.type,
              data: base64Image
            }
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 2048,
          candidateCount: 1,
          safetySettings: [
            { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_DANGEROUS', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_HARSH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_SELF_HARM', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_VIOLENCE', threshold: 'BLOCK_MEDIUM_AND_ABOVE' }
          ]
        }
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${GEMINI_API_KEY}`,
          'X-Goog-Api-Key': GEMINI_API_KEY,
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      }
    );

    const data = response.data;
    console.log('Gemini API response:', {
      status: response.status,
      statusText: response.statusText,
      candidates: data.candidates?.length || 0,
      responseTime: Date.now() - startTime
    });

    // Extract and format the poem
    const poem = data.candidates?.[0]?.content?.text;
    if (!poem) {
      throw new Error('No text generated by Gemini API');
    }

    return NextResponse.json({
        success: true,
        poem: poem.trim(),
        metadata: {
          model: 'gemini-pro-vision',
          timestamp: new Date().toISOString(),
          imageType: file.type
        }
      }, {
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });

  } catch (error) {
    console.error('Error in generate-poem:', error);
    
    let errorMessage = 'Failed to generate poem using Gemini API';
    if (error.response?.status === 401) {
      errorMessage = 'Invalid Gemini API key format. Please verify your VITE_GEMINI_API_KEY in Vercel settings.';
    } else if (error.response?.status === 403) {
      errorMessage = 'Insufficient permissions. Please check your Gemini API key permissions in Google Cloud Console.';
    } else if (error.response?.status === 429) {
      errorMessage = 'Gemini API rate limit exceeded. Please wait a moment and try again.';
    } else if (error.message) {
      errorMessage = `Gemini API Error: ${error.message}`;
    }
    
    return NextResponse.json(
      { error: errorMessage },
      { status: error.response?.status || 500, headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      } }
    );
  }
}
  }
}
